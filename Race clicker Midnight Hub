-- Configuration
local Config = {
    DEBUG = false,
    DEFAULT_WALKSPEED = 16,
    DEFAULT_JUMPPOWER = 50,
    UI_NOTIFICATION_DURATION = 5
}

-- Utility Functions
local Utilities = {}

function Utilities.notify(title, message)
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = title,
        Text = message,
        Duration = Config.UI_NOTIFICATION_DURATION
    })
end

function Utilities.safeInvoke(fn, ...)
    local success, result = pcall(fn, ...)
    if not success and Config.DEBUG then
        warn("Error in function call:", result)
    end
    return success, result
end

-- Character Functions
local Character = {}

function Character.teleport(targetCFrame)
    local player = game.Players.LocalPlayer
    if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        player.Character.HumanoidRootPart.CFrame = targetCFrame
    end
end

function Character.setWalkSpeed(speed)
    local player = game.Players.LocalPlayer
    if player.Character and player.Character:FindFirstChild("Humanoid") then
        player.Character.Humanoid.WalkSpeed = speed
    end
end

function Character.setJumpPower(power)
    local player = game.Players.LocalPlayer
    if player.Character and player.Character:FindFirstChild("Humanoid") then
        player.Character.Humanoid.JumpPower = power
    end
end

-- Game Actions
local GameActions = {}

function GameActions.autoClick()
    spawn(function()
        while getgenv().autoClickEnabled do
            Utilities.safeInvoke(function()
                game:GetService("ReplicatedStorage").Packages.Knit.Services.ClickService.RF.Click:InvokeServer()
                Character.teleport(CFrame.new(-442300, 26, 13))
                task.wait()
                Character.teleport(CFrame.new(-442100, 26, 13))
            end)
            task.wait()
        end
    end)
end

function GameActions.autoEquipBest()
    spawn(function()
        while getgenv().autoEquipEnabled do
            Utilities.safeInvoke(function()
                game:GetService("ReplicatedStorage").Packages.Knit.Services.PetsService.RF.EquipBest:InvokeServer()
            end)
            task.wait(1)
        end
    end)
end

-- UI Creation
local function createUI()
    local OrionLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/shlexware/Orion/main/source"))()
    local Window = OrionLib:MakeWindow({
        Name = "Race Clicker",
        HidePremium = false,
        SaveConfig = true,
        ConfigFolder = "RaceClicker"
    })

    -- Main Tab
    local MainTab = Window:MakeTab({
        Name = "Main",
        Icon = "rbxassetid://4483345998",
        PremiumOnly = false
    })

    MainTab:AddToggle({
        Name = "Auto Click",
        Default = false,
        Callback = function(value)
            getgenv().autoClickEnabled = value
            if value then GameActions.autoClick() end
        end
    })

    MainTab:AddToggle({
        Name = "Auto Equip Best",
        Default = false,
        Callback = function(value)
            getgenv().autoEquipEnabled = value
            if value then GameActions.autoEquipBest() end
        end
    })

    -- Player Tab
    local PlayerTab = Window:MakeTab({
        Name = "LocalPlayer",
        Icon = "rbxassetid://4483345998",
        PremiumOnly = false
    })

    PlayerTab:AddSlider({
        Name = "WalkSpeed",
        Min = 0,
        Max = 1000,
        Default = Config.DEFAULT_WALKSPEED,
        Color = Color3.fromRGB(255,255,255),
        Increment = 1,
        ValueName = "Speed",
        Callback = function(value)
            Character.setWalkSpeed(value)
        end
    })

    PlayerTab:AddSlider({
        Name = "JumpPower",
        Min = 0,
        Max = 1000,
        Default = Config.DEFAULT_JUMPPOWER,
        Color = Color3.fromRGB(255,255,255),
        Increment = 1,
        ValueName = "Power",
        Callback = function(value)
            Character.setJumpPower(value)
        end
    })

    return OrionLib
end

-- Initialize
local function init()
    local success, UI = Utilities.safeInvoke(createUI)
    if success then
        UI:Init()
        Utilities.notify("Success", "Script loaded successfully!")
    else
        Utilities.notify("Error", "Failed to load UI")
    end
end

init()
